# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddPaymentInput {
  amount: Int!
  eventId: String!
  name: String!
  whoPaidId: Int!
  whoShouldPay: [WhoShouldPayInput!]!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Event {
  createdAt: DateTime!
  id: ID!
  name: String!
  participants: [Participant!]!
  payments: [Payment!]!
  sumPrice: Int!
  updatedAt: DateTime!
}

input EventInput {
  eventName: String!
  participants: [ParticipantForEventInput!]!
}

type From {
  id: Int!
  name: String!
  shouldHavePaid: Int!
}

type Mutation {
  addPayment(input: AddPaymentInput!): Payment!
  createEvent(input: EventInput!): Event!
  deletePayment(paymentId: Int!): Payment!
}

type Participant {
  createdAt: DateTime!
  eventId: ID!
  id: Int!
  name: String!
  participant: String
  participantId: String
  pictureUrl: String
  updatedAt: DateTime!
}

input ParticipantForEventInput {
  name: String!
}

type Payment {
  amount: Int!
  createdAt: DateTime!
  eventId: ID!
  id: Int!
  name: String!
  updatedAt: DateTime!
  whoPaid: Participant
  whoPaidId: Int!
  whoShouldPay: [Participant!]
}

type Query {
  event(eventId: String!): Event!
  events: [Event!]!
  participants(eventId: String!): [Participant!]!
  payments(eventId: String!): [Payment!]!
  result(eventId: String!): Result!
}

type Result {
  id: String!
  name: String!
  sumPrice: Int!
  transactions: [Transaction!]!
}

type To {
  amount: Int!
  id: Int!
  name: String!
}

type Transaction {
  from: From!
  to: [To!]!
}

input WhoShouldPayInput {
  participantId: Int!
  ratio: Float!
}
